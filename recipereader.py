# -*- coding: utf-8 -*-
"""recipereader

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--0sC7n1b-BJCdj9BGkXRAwrsHlie3zG
"""

!pip -q install streamlit==1.25 pyngrok pytesseract streamlit_drawable_canvas gtts streamlit_javascript
!pip -q install -U google-genai

!ngrok config add-authtoken 32Fyh4qxeq1awkHOdtt8FqT8Nc2_3fMPWRGMhC1QwhUQPBg6r

import os, getpass
os.environ["GOOGLE_API_KEY"] = getpass.getpass("ðŸ”‘  Paste your Gemini API key and hit Enter: ")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import requests
# import json
# import re
# from bs4 import BeautifulSoup
# from streamlit_drawable_canvas import st_canvas
# from PIL import Image
# import pytesseract
# import os
# import google.generativeai as genai
# from streamlit_javascript import st_javascript
# 
# genai.configure(api_key="AIzaSyD4n0FK1OQQS0uLwJuSxvdiBLL31JTw3s0")
# 
# def call_gemini(prompt, model_name="gemini-2.5-flash"):
#     model = genai.GenerativeModel(model_name)
#     resp  = model.generate_content(prompt)
#     return resp.text
# 
# st.title("Recipe Ingredient Extractor")
# 
# st.header("Extraction Through Online Links")
# 
# url = st.text_input("Enter a recipe website link:")
# 
# if url:
#     response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
#     soup = BeautifulSoup(response.content, "html.parser")
# 
#     page_text = soup.get_text(" ", strip=True)
# 
#     prompt = f"""
#     Extract only the list of ingredients from this recipe page text.
#     Keep only amounts, not descriptor words.
#     Format them as bullet points, nothing else.
# 
#     Page text:
#     {page_text[:6000]}
#     """
# 
#     model = genai.GenerativeModel("gemini-2.5-flash")
#     resp = model.generate_content(prompt)
# 
#     st.write(resp.text)
# 
# st.header("Extraction Through Images")
# 
# screen_width = st_javascript("window.innerWidth")
# maxwidth = int(screen_width * 0.8)
# 
# uploadedfile = st.file_uploader("Upload an image of a recipe", type=["png", "jpg", "jpeg"])
# if uploadedfile:
#   original = Image.open(uploadedfile)
# 
#   if original.width > maxwidth:
#     scale = maxwidth / original.width
#     newwidth = maxwidth
#     newheight = int(original.height * scale)
#     resized = original.resize((newwidth, newheight))
#   else:
#     resized = original
#     newwidth, newheight = resized.size
# 
#   st.image(original, caption="original image", use_column_width=False)
# 
#   st.subheader("Draw a box around the recipe you want to extract")
#   canvasresult = st_canvas(
#     fill_color="rgba(255, 165, 0, 0.3)",
#     stroke_width=2,
#     stroke_color="#000000",
#     background_image=resized,
#     update_streamlit=True,
#     height=newheight,
#     width=newwidth,
#     drawing_mode="rect",
#     key="canvas"
#   )
# 
#   if canvasresult.json_data and canvasresult.json_data["objects"]:
#     for obj in canvasresult.json_data["objects"]:
#       left = int(obj["left"])
#       top = int(obj["top"])
#       width = int(obj["width"])
#       height = int(obj["height"])
#       cropped = resized.crop((left, top, left + width, top + height))
#       st.image(cropped, caption="Selected region", use_column_width=False)
# 
#       extracted = pytesseract.image_to_string(cropped)
# 
#       st.subheader("Review and correct your extracted recipe")
#       corrected = st.text_area("Make any necessary changes below before saving:", value=extracted, height=200)
# 
#       if st.button("Save corrected recipe"):
#         with open("corrected.txt", "w", encoding="utf-8") as f:
#           f.write(corrected)
#         st.success("Recipe saved successfully!")

!streamlit run app.py &>/content/logs.txt &

from pyngrok import ngrok
public_url = ngrok.connect(8501, "http")
public_url